_________________________________________________________________________________________________________
_________________________________________________________________________________________________________
08/04
_________________________________________________________________________________________________________
_________________________________________________________________________________________________________
Anotações Java
o nome do arquivo tem que fica identico ao nome da class
EX:
public class Mensagem{
	public static void main(String[] args){
	System.out.println("Olá Mundo | Hello World!");
	}
}
O nome do arquivotem que ser Mensagem, tem que ser literalmente igual, tanto no formado quando 
maisculo ou minisculo, letra por letra.
Variavel na java é obrigatorio a ter tipo para da certo
EX:
        String nome;
        int idade;
        String sexo;
        double peso;

Se utiliza aspas duplas nas strings e ponto-virgula no final, se não coloca da error
se for int ou float não utiliza aspas duplas
CTRL D mutiplica a apenas a linha que esta em cima do digitamento 


sout ->         System.out.println(); preencher assim como padrão
_________________________________________________________________________________________________________
_________________________________________________________________________________________________________

15/04
_________________________________________________________________________________________________________
_________________________________________________________________________________________________________
Opções de entradas

os arquivos precisam está no src para funciona no java
_________________________________________________________
|.nextDouble() -> vai captura o double                   |

|.next(); -> vai captura strings sem espaços             |

|.nextLine();-> usado para captura strings com espaços   |

|.netxInt();-> captura o numero inteiro                  |

----------------------------------------------------------

Para ler uma palavra sem espaço utilizat apenas o .next();

OBS: o double quando usar ponto da erro, ele aceita virgula, mas caso queira que usa ponto defina a localização dos US
ex: 
Locale.setDefault(Locale.US)-> usado quando permitirem a entrada com ponto

char sexo = leia.next().charAt(0); -> esse char está definido para pega apenas um caracter como ali no final (0 é associado como o primeiro caracter, o computador começa sempre contar do zero)

_________________________________________________________________________________________________________

Opções de entradas

os arquivos precisam está no src para funciona no java
_________________________________________________________
|.nextDouble() -> vai captura o double                   |
|.next(); -> vai captura strings sem espaços             |
|.nextLine();-> usado para captura strings com espaços   |
|.netxInt();-> captura o numero inteiro                  |
----------------------------------------------------------

Para ler uma palavra sem espaço utilizat apenas o .next();

OBS: o double quando usar ponto da erro, ele aceita virgula, mas caso queira que usa ponto defina a localização dos US
ex: 
Locale.setDefault(Locale.US)-> usado quando permitirem a entrada com ponto

curiosidade:
Pode coloca todas as informações na mesma linha do terminal que conforme programado vai aparece um embaixo do outro
EXEMPLO:
        Scanner ler = new Scanner(System.in);
        String nome = ler.next();
        int idade = ler.nextInt();
        double peso = ler.nextDouble();
		
        System.out.println("Dados Digitados: ");
        System.out.println(nome);
        System.out.println(idade);
        System.out.println(peso);
		
TERMINAL:
maria 30 4.5 -> informações escritas pelo usuario
Dados Digitados: 
maria
30
4.5
__________________________________________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________________________________________
22/04
__________________________________________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________________________________________
se os tipos de next line for apos os doubles ou int, vai da ruim. Eles ler o double, int, mas se o next estiver apos a captura, como os exemplos a seguir, ele vai passa reto e não vai ler
EX:

nextDouble
nextInt       _>error na certa
nextLine 

nextInt       _>error na certa
nextLine 

nextDouble       _>error na certa
nextLine 


Se resolver que antes do next line, você vai colocar uma linha 
nextInt     
** -> aquii vai coloca o nextLine, aqui vai captura o espaço que ele estava procurando e segue o codigo normalmente, sem ele os int,
	  double next antes do line sem essa linha da error e não vai ler a seguir
nextLine

__________________________________________________________________________________________________________________________________________________________________________________________
nextDouble
*       
nextLine
__________________________________________________________________________________________________________________________________________________________________________________________
nextInt       
nextDouble
**
nextLine 
__________________________________________________________________________________________________________________________________________________________________________________________

Exemplo mais realista da solução:
 public static void main(String[] args) {
        Scanner leia = new Scanner(System.in);
        System.out.println("Idade: ");
        int idade = leia.nextInt();

        System.out.println("Peso");
        double peso = leia.nextDouble();
        leia.nextLine();

        System.out.println("Nome completo: ");
        String nome = leia.nextLine();

        System.out.println("Idade: " + idade
                + "\nPeso: " + peso
                + "\nNome: " + nome);

__________________________________________________________________________________________________________________________________________________________________________________________

System.out.println -> esse tem quebra de linha
Exemplo: 
System.out.println("Oi");
System.out.println("Oi");
System.out.println("Oi"); 
-> Os ois vão sai tudo um embaixo do outro


System.out.print -> ele não tem quebra de linha
Exemplo: 
System.out.print("oi");
System.out.print("oi");
System.out.print("oi");
System.out.print("oi");
-> os oi vão aparece tudo um na frente do outro

System.out.printf -> usado para formatar saida, tipo quero arredonda o PI para só 3 casas demais, esse é o unico que resolver! Ele tem algumas particularidade
 double x = 10.6532
 
 System.out.printf("%.2f\n", x) -> ele mostra apenas os 2 números depois da virgula, das casas decimais, caso queira mostra mais casas troca o 2 pelo tanto que deseja!
 ->2 número de casa decimais que quero que mostre
 f-> abreviação da formatação ou float
 %-> usado em conjunto com outras funções para conseguir o arredondamento desejado, especialmente quando se trata de arredondar para um número inteiro específico ou para um certo número de casas decimais. 
 %f ->números flutuantes 
 %d -> inteiros
 %s -> textos
 %n -> quebra linhas
 para a formação é necessario coloca a virgula e a variaavel que deseja formatar
 Obs: Essa formatação arredonda
 
 REGRA SIMPLES:
	Que usar o double? Usa o System.out.printf

O printf também não pula linha automaticamente!

__________________________________________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________________________________________
29/04
__________________________________________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________________________________________
.equals() -> para verifica se a string no java ao inves do ==
&& -> igual o and do python
todas vez que trabalha com string trabalha com o equals, caso queira ver se a string, no if, está igual se utilizar o equals

== -> utilizar para verifica se é igual mas só trabalha com double ou int, nada de string

com double especifica o número de casa depois da virgula se não ele mesmo acrescenta número

na string o '==' significa outra coisa, pode funciona, mas ele é usado para outra função, mas pode funciona igual o .equals. 
Ele com o === analisa o endereço e conteudo, muito complicado, mas vai explica depois

CONDICIONAL
-Int -> ==
-Double -> ==
-String -> equals

________
para nomes na frente da pergunta é só digita print sem o ln
--------
__________________________________________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________________________________________

06/05
__________________________________________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________________________________________

*****O atributo é fora do metodo principal****

atributo -> uma caracteristicas
classe -> é uma modelagem


eu não crio atributos no metodo principal, ele é criado dentro da classe

-> O Objeto é criado dentro do metodo principal <-

programa principal ou metodo principal:

 public static void main(String[] args) {
        // Tudo aqui dentro
    }

Instaciando -->

new com a classe que desejar exemplo: -> necessario decorar
Cachorro() -> ele é um construtor, chamado de variavel de referencia

Cachorro c = new Cachorro(); -> tem que coloca a clasee que depois a variavel que poderá ser ela exemplo Cachorro(classe) c(variavel) = new Cachorro();-> declarou que é classe

Classes tem que ser maisculas

+ -> ele concatenar os texto com as variaveis

metodo que não retorna (obs: não retorna não significa que ele não faz nada) -> ele sempre inicia com void, eles utilizam o ComiCase
metodo sempre utiliza o ComeCase ex: emitirSomDeGato
Criar metodos iniciar com a letra minuscula, classes maiuscula

--> Utilizar os parametros do void quando não se tem atributos da classe. EXEMPLO DISSO NO Carro2

__________________________________________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________________________________________

17/06
__________________________________________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________________________________________
NÃO DEVE ANOTAÇÕES NESSE DIA!!!
__________________________________________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________________________________________
24/06
__________________________________________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________________________________________
O encapsulamento é uma forma de proteger as informações, você esconde os atributos, a ideia é esconde os detalhes internos
ESCAPSULAMENTO == ESCONDER
utilizar metodos para ter esse acesso

metodos publicos chamados get e set

Um exemplo disso é a maquina de cafe, onde só ver ligar, desliga e iniciar, mas as valvulas, fios entre outros você não ver

1-Torne pos atributos private(orivado) onde só poderá ser acessado dentro da propria classe

EXEMPLO:

private String nome; //atributo encapsulado

//metodopara ler o nome
public String getNome(){ //o string é o tipo do get
return nome}
___________________________________________________________________________________________________________________________________________
|get == para capturar a informação dentro do quadrado, se esta usando get é porque está tirando o nome de lá, nesse não tem parametro     |
|set == para coloca a informação dentro do quadrado, nãp tem return e é do tipo void, ai nisso tem parametro                              |
___________________________________________________________________________________________________________________________________________
public void setNome(String Nome){
    this.nome= nome
}

Obs: dá para fazer get de referencia


GET TEM TIPAGEM, NÃO TEM PARAMETRO E TEM RETURN
SET NÃO TEM TIPAGEM, TEM PARAMETRO E NÃO TEM RETURN

A ideia atrás do encapsulamento é a validação, caso precise validar use o encapsulamento!
EXEMPLO:
Um aluno pode receber -5 nota ou acima de 100?
Nesse caso utilizer o encapsulamento.
__________________________________________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________________________________________
08/07
__________________________________________________________________________________________________________________________________________________________________________________________
__________________________________________________________________________________________________________________________________________________________________________________________
public -> acessao pelas classes, sub classes é pacotes do projeto
Proj
|_pacote1
|   |->classe1
|_pacote2
    |->classe2

default -> vazio, o padrão sem atributos ou modificadores
no default a visibilidade é somente no pact1 e classe não é visivel
em classes que tem pacote diferente


            classe  pacote   subclasse   todos
public     |   x   |  x    |    x      |   x
protected  |   x   |  x    |    x      |
default    |   x   |  x    |
privete    |   x   |


super() ->chamar o construto da superclasse
super.metodo()->chama um metodo da superclasse


@Override -> sobrescrever a classe herdada
quando for pirvate não terá acesso a outros pacotes

se vai acessa diretamente privete
indiretamente protected